// Generated by github.com/davyxu/tabtoy
// Version: 3.1.4
// DO NOT EDIT!!

using System.Collections.Generic;

namespace Config
{
	
	

	// Defined in table: Config
	
	public partial class Config
	{
	
		public Logger TableLogger = new Logger();
	
		
		/// <summary> 
		/// GoodConfig
		/// </summary>
		public List<GoodConfigDefine> GoodConfig = new List<GoodConfigDefine>(); 
		
		/// <summary> 
		/// LanguageData
		/// </summary>
		public List<LanguageDataDefine> LanguageData = new List<LanguageDataDefine>(); 
		
		/// <summary> 
		/// Tower
		/// </summary>
		public List<TowerDefine> Tower = new List<TowerDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, GoodConfigDefine> _GoodConfigByID = new Dictionary<int, GoodConfigDefine>();
        public GoodConfigDefine GetGoodConfigByID(int ID, GoodConfigDefine def = default(GoodConfigDefine))
        {
            GoodConfigDefine ret;
            if ( _GoodConfigByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(GoodConfigDefine) )
			{
				TableLogger.ErrorLine("GetGoodConfigByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, LanguageDataDefine> _LanguageDataByID = new Dictionary<int, LanguageDataDefine>();
        public LanguageDataDefine GetLanguageDataByID(int ID, LanguageDataDefine def = default(LanguageDataDefine))
        {
            LanguageDataDefine ret;
            if ( _LanguageDataByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(LanguageDataDefine) )
			{
				TableLogger.ErrorLine("GetLanguageDataByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, TowerDefine> _TowerByID = new Dictionary<int, TowerDefine>();
        public TowerDefine GetTowerByID(int ID, TowerDefine def = default(TowerDefine))
        {
            TowerDefine ret;
            if ( _TowerByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(TowerDefine) )
			{
				TableLogger.ErrorLine("GetTowerByID failed, ID: {0}", ID);
			}

            return def;
        }
		
		public string GetBuildID(){
			return "993e55215415c52c4d6be5848ee722bb";
		}
	
		#endregion
		#region Deserialize code
		
		static DeserializeHandler<Config> _ConfigDeserializeHandler;
		static DeserializeHandler<Config> ConfigDeserializeHandler
		{
			get
			{
				if (_ConfigDeserializeHandler == null )
				{
					_ConfigDeserializeHandler = new DeserializeHandler<Config>(Deserialize);
				}

				return _ConfigDeserializeHandler;
			}
		}
		public static void Deserialize( Config ins, DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.GoodConfig.Add( reader.ReadStruct<GoodConfigDefine>(GoodConfigDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0001:
                	{
						ins.LanguageData.Add( reader.ReadStruct<LanguageDataDefine>(LanguageDataDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0002:
                	{
						ins.Tower.Add( reader.ReadStruct<TowerDefine>(TowerDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build GoodConfig Index
			for( int i = 0;i< ins.GoodConfig.Count;i++)
			{
				var element = ins.GoodConfig[i];
				
				ins._GoodConfigByID.Add(element.ID, element);
				
			}
			
			// Build LanguageData Index
			for( int i = 0;i< ins.LanguageData.Count;i++)
			{
				var element = ins.LanguageData[i];
				
				ins._LanguageDataByID.Add(element.ID, element);
				
			}
			
			// Build Tower Index
			for( int i = 0;i< ins.Tower.Count;i++)
			{
				var element = ins.Tower[i];
				
				ins._TowerByID.Add(element.ID, element);
				
			}
			
		}
		static DeserializeHandler<GoodConfigDefine> _GoodConfigDefineDeserializeHandler;
		static DeserializeHandler<GoodConfigDefine> GoodConfigDefineDeserializeHandler
		{
			get
			{
				if (_GoodConfigDefineDeserializeHandler == null )
				{
					_GoodConfigDefineDeserializeHandler = new DeserializeHandler<GoodConfigDefine>(Deserialize);
				}

				return _GoodConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( GoodConfigDefine ins, DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.IconName = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Model = reader.ReadString();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.UnlockType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.GoodTypeID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.QuaID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.SellFlag = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.SellCoinType = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.SellCoinCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.UseCondition = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.ExistTimeType = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.ExistTimeValue = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.MaxUseTimes = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static DeserializeHandler<LanguageDataDefine> _LanguageDataDefineDeserializeHandler;
		static DeserializeHandler<LanguageDataDefine> LanguageDataDefineDeserializeHandler
		{
			get
			{
				if (_LanguageDataDefineDeserializeHandler == null )
				{
					_LanguageDataDefineDeserializeHandler = new DeserializeHandler<LanguageDataDefine>(Deserialize);
				}

				return _LanguageDataDefineDeserializeHandler;
			}
		}
		public static void Deserialize( LanguageDataDefine ins, DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.CN = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.English = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Russian = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Portuguese = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.Spanish = reader.ReadString();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.Turkish = reader.ReadString();
                	}
                	break; 
                	case 0x60007:
                	{
						ins.Arabic = reader.ReadString();
                	}
                	break; 
                	case 0x60008:
                	{
						ins.Vietnamese = reader.ReadString();
                	}
                	break; 
                	case 0x60009:
                	{
						ins.Indonesian = reader.ReadString();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.FR = reader.ReadString();
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.RO = reader.ReadString();
                	}
                	break; 
                	case 0x6000c:
                	{
						ins.JP = reader.ReadString();
                	}
                	break; 
                	case 0x6000d:
                	{
						ins.DE = reader.ReadString();
                	}
                	break; 
                	case 0x6000e:
                	{
						ins.IT = reader.ReadString();
                	}
                	break; 
                	case 0x6000f:
                	{
						ins.UA = reader.ReadString();
                	}
                	break; 
                	case 0x60010:
                	{
						ins.IN = reader.ReadString();
                	}
                	break; 
                	case 0x60011:
                	{
						ins.TH = reader.ReadString();
                	}
                	break; 
                	case 0x60012:
                	{
						ins.KR = reader.ReadString();
                	}
                	break; 
                }
             } 

			
		}
		static DeserializeHandler<TowerDefine> _TowerDefineDeserializeHandler;
		static DeserializeHandler<TowerDefine> TowerDefineDeserializeHandler
		{
			get
			{
				if (_TowerDefineDeserializeHandler == null )
				{
					_TowerDefineDeserializeHandler = new DeserializeHandler<TowerDefine>(Deserialize);
				}

				return _TowerDefineDeserializeHandler;
			}
		}
		public static void Deserialize( TowerDefine ins, DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		#endregion
		#region Clear Code
		public void Clear( )
		{			
				GoodConfig.Clear(); 		
				LanguageData.Clear(); 		
				Tower.Clear(); 
			
				_GoodConfigByID.Clear(); 
				_LanguageDataByID.Clear(); 
				_TowerByID.Clear(); 
		}
		#endregion
	

	} 

	// Defined in table: GoodConfig
	
	public partial class GoodConfigDefine
	{
	
		
		/// <summary> 
		/// 物品唯一的ID： 11开头：建筑 12开头：遗物
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// icon名称
		/// </summary>
		public string IconName = ""; 
		
		/// <summary> 
		/// 物品的3D资源 （有则填写）
		/// </summary>
		public string Model = ""; 
		
		/// <summary> 
		/// 解锁方式:0=默认解锁 1=货币解锁 2=任务解锁 3=怪物掉落
		/// </summary>
		public int UnlockType = 0; 
		
		/// <summary> 
		/// 物品类型 100=建筑 101=消耗品 102=道具 103=材料 104=任务物品105=装备
		/// </summary>
		public int GoodTypeID = 0; 
		
		/// <summary> 
		/// 1白2绿3蓝4紫5橙
		/// </summary>
		public int QuaID = 0; 
		
		/// <summary> 
		/// 是否可以出售，0=不可出售；1=可出售
		/// </summary>
		public int SellFlag = 0; 
		
		/// <summary> 
		/// 出售物品获得的货币类型，参考货币表
		/// </summary>
		public int SellCoinType = 0; 
		
		/// <summary> 
		/// 出售物品获得的货币数量
		/// </summary>
		public int SellCoinCount = 0; 
		
		/// <summary> 
		/// 使用限制类型： 0=无限制 1=等级限制 2=任务限制 3=物品限制 4=职业限制 5=冷却时间 9=回合限制
		/// </summary>
		public int UseCondition = 0; 
		
		/// <summary> 
		/// 存在时间类型（0无时限，1从获得开始限时）
		/// </summary>
		public int ExistTimeType = 0; 
		
		/// <summary> 
		/// 存在时间(回合数，获取的回合算1回合)
		/// </summary>
		public int ExistTimeValue = 0; 
		
		/// <summary> 
		/// 一回合最大使用吃书(不填无限使用)
		/// </summary>
		public int MaxUseTimes = 0; 
	
	

	} 

	// Defined in table: LanguageData
	
	public partial class LanguageDataDefine
	{
	
		
		/// <summary> 
		/// ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 中文
		/// </summary>
		public string CN = ""; 
		
		/// <summary> 
		/// 英语
		/// </summary>
		public string English = ""; 
		
		/// <summary> 
		/// 俄语
		/// </summary>
		public string Russian = ""; 
		
		/// <summary> 
		/// 葡萄牙语
		/// </summary>
		public string Portuguese = ""; 
		
		/// <summary> 
		/// 西班牙语
		/// </summary>
		public string Spanish = ""; 
		
		/// <summary> 
		/// 土耳其语
		/// </summary>
		public string Turkish = ""; 
		
		/// <summary> 
		/// 阿拉伯语
		/// </summary>
		public string Arabic = ""; 
		
		/// <summary> 
		/// 越南语
		/// </summary>
		public string Vietnamese = ""; 
		
		/// <summary> 
		/// 印尼语
		/// </summary>
		public string Indonesian = ""; 
		
		/// <summary> 
		/// FR法语
		/// </summary>
		public string FR = ""; 
		
		/// <summary> 
		/// RO罗马尼亚语
		/// </summary>
		public string RO = ""; 
		
		/// <summary> 
		/// JP日语
		/// </summary>
		public string JP = ""; 
		
		/// <summary> 
		/// DE德语
		/// </summary>
		public string DE = ""; 
		
		/// <summary> 
		/// IT意大利语
		/// </summary>
		public string IT = ""; 
		
		/// <summary> 
		/// UA乌克兰语
		/// </summary>
		public string UA = ""; 
		
		/// <summary> 
		/// IN印地语
		/// </summary>
		public string IN = ""; 
		
		/// <summary> 
		/// TH泰语
		/// </summary>
		public string TH = ""; 
		
		/// <summary> 
		/// KR韩语
		/// </summary>
		public string KR = ""; 
	
	

	} 

	// Defined in table: Tower
	
	public partial class TowerDefine
	{
	
		
		/// <summary> 
		/// ID
		/// </summary>
		public int ID = 0; 
	
	

	} 

}
